openapi: 3.0.0
info:
  title: Libgloss API
  description: Libgloss API documentation
  version: 1.0.0
tags:
  users:
    name: Users
    description: Contains all users related endpoints
  lists:
    name: Lists
    description: Contains all lists related endpoints
  books:
    name: Books
    description: Contains all books related endpoints
  book_details:
    name: Book details
    description: Contains all book price related endpoints
  user_books:
    name: User books
    description: Contains all books uploaded by users
paths:
  /api/users:
    post:
      tags:
        - users
      summary: Create user
      description: Creates a new user
      operationId: createUser
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
  /api/users/:query:
    get:
      tags:
        - users
      summary: Get user
      description: Returns a user given a query. The query can be the user's email, username or id.
      operationId: getUser
      parameters:
        - name: query
          in: path
          description: Query to search
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found
    put:
      tags:
        - users
      summary: Update user
      description: Updates a user given a query. The query can be the user's email, username or id.
      operationId: updateUser
      parameters:
        - name: query
          in: path
          description: Query to search
          required: true
          schema:
            type: string
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
        - users
      summary: Delete user
      description: Deletes a user given a query. The query can be the user's email, username or id.
      operationId: deleteUser
      parameters:
        - name: query
          in: path
          description: Query to search
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
  /api/lists/:useruid:
    get:
      tags:
        - lists
      summary: Get user lists
      description: Returns a list of lists given a user uid.
      operationId: getUserLists
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        404:
          description: Not Found
  /api/lists/:useruid/tracking:
    post:
      tags:
        - lists
      summary: Create user tracking list
      description: Creates a new user tracking list given a user uid.
      operationId: createUserTrackingList
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      requestBody:
        description: List to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        400:
          description: Bad Request
        404:
          description: Not Found
    put:
      tags:
        - lists
      summary: Update user tracking list
      description: Updates a user tracking list given a user uid.
      operationId: updateUserTrackingList
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      requestBody:
        description: List to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        400:
          description: Bad Request
        404:
          description: Not Found
  /api/lists/:useruid/wish:
    post:
      tags:
        - lists
      summary: Create user wish list
      description: Creates a new user wish list given a user uid.
      operationId: createUserWishList
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      requestBody:
        description: List to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        400:
          description: Bad Request
        404:
          description: Not Found
    put:
      tags:
        - lists
      summary: Update user wish list
      description: Updates a user wish list given a user uid.
      operationId: updateUserWishList
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      requestBody:
        description: List to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        400:
          description: Bad Request
        404:
          description: Not Found
  /api/lists/:useruid/tracking/:listItemuid:
    get:
      tags:
        - lists
      summary: Get user tracking list item
      description: Returns a user tracking list item given a user uid and a list item uid.
      operationId: getUserTrackingListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
        404:
          description: Not Found
    put:
      tags:
        - lists
      summary: Update user tracking list item
      description: Updates a user tracking list item given a user uid and a list item uid.
      operationId: updateUserTrackingListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      requestBody:
        description: List item to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItem'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
        - lists
      summary: Delete user tracking list item
      description: Deletes a user tracking list item given a user uid and a list item uid.
      operationId: deleteUserTrackingListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
  /api/lists/:useruid/wish/:listItemuid:
    get:
      tags:
        - lists
      summary: Get user wish list item
      description: Returns a user wish list item given a user uid and a list item uid.
      operationId: getUserWishListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
        404:
          description: Not Found
    put:
      tags:
        - lists
      summary: Update user wish list item
      description: Updates a user wish list item given a user uid and a list item uid.
      operationId: updateUserWishListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      requestBody:
        description: List item to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItem'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
        - lists
      summary: Delete user wish list item
      description: Deletes a user wish list item given a user uid and a list item uid.
      operationId: deleteUserWishListItem
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
        - name: listItemuid
          in: path
          description: List item uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
  /api/userbooks:
    get:
      tags:
        - userbooks
      summary: Get all user books
      description: Returns a list of user books. Since the user books are stored in a database, the list is paginated. The default page size is 10. You can change the page size by adding the `page_size` query parameter. You can also change the page by adding the `page` query parameter.
      operationId: getUserBooks
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          default: 1
          schema:
            type: integer
            format: int32
        - name: page_size
          in: query
          description: Page size
          required: false
          default: 10
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserBook'
  /api/userbooks/:useruid:
    post:
      tags:
        - userbooks
      summary: Add user book
      description: Adds a user book given a user uid.
      operationId: addUserBook
      parameters:
        - name: useruid
          in: path
          description: User uid
          required: true
          schema:
            type: string
      requestBody:
        description: User book to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBook'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBook'
        400:
          description: Bad Request
        404:
          description: Not Found
  /api/userbooks/:bookuid:
    get:
      tags:
        - userbooks
      summary: Get user book
      description: Returns a user book given a book uid.
      operationId: getUserBook
      parameters:
        - name: bookuid
          in: path
          description: Book uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBook'
        404:
          description: Not Found
    put:
      tags:
        - userbooks
      summary: Update user book
      description: Updates a user book given a book uid.
      operationId: updateUserBook
      parameters:
        - name: bookuid
          in: path
          description: Book uid
          required: true
          schema:
            type: string
      requestBody:
        description: User book to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBook'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBook'
        400:
          description: Bad Request
        404:
          description: Not Found
    delete:
      tags:
        - userbooks
      summary: Delete user book
      description: Deletes a user book given a book uid.
      operationId: deleteUserBook
      parameters:
        - name: bookuid
          in: path
          description: Book uid
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
  /api/books:
    get:
      tags:
        - books
      summary: Get all books
      description: Returns a list of books. Since the books are stored in a database, the list is paginated. The default page size is 10. You can change the page size by adding the `page_size` query parameter. You can also change the page by adding the `page` query parameter.
      operationId: getBooks
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          default: 1
          schema:
            type: integer
            format: int32
        - name: page_size
          in: query
          description: Page size
          required: false
          default: 10
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/books/random:
    get:
      tags:
        - books
      summary: Get random books
      description: Get a list of random books. The default page size is 10. You can change the page size by adding the `page_size` query parameter.
      operationId: getRandomBooks
      parameters:
        - name: page_size
          in: query
          description: Page size
          required: false
          default: 10
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /api/books/search:
    get:
      tags:
        - books
      summary: Search books
      description: Search books given a query, multiple parameters can be used at the same time
      operationId: searchBooks
      parameters:
      - name: title
        in: query
        description: Query to search
        required: false
        schema:
          type: string
      - name: category
        in: query
        description: Category to search
        required: false
        schema:
          type: enum
          enum: [Acción, Aventura, Ciencia Ficción, Fantasía, Misterio, Romance, Terror, Thriller]
      - name: author
        in: query
        description: Author to search
        required: false
        schema:
          type: string
      - name: isbn
        in: query
        description: ISBN to search
        required: false
        schema:
          type: string
      - name: publisher
        in: query
        description: Publisher to search
        required: false
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        404:
          description: Not Found
  /api/books/details:
    get:
      tags:
        - book_details
      summary: Get book details
      description: Returns the price of a book in different online stores. If the book is not available in a store, or the store is not available, the price will be `null`.
      operationId: getBookDetails
      parameters:
      - name: isbn
        in: query
        description: ISBN to search
        required: true
        schema:
          type: string
      - name: store
        in: query
        description: Store to search, if not specified, all stores will be searched
        required: false
        schema:
          type: enum
          enum: [amazon, mercado_libre, gandhi, gonvill, el_sotaon]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPrice'
        400:
          description: Bad Request
        404:
          description: Not Found         
  /api/books/history:
    get:
      tags:
        - book_details
      summary: Get books history
      description: Returns the price history of a book. The price history is stored in a database, so it will only be available for books that have been added to the wishlist, or books that have been searched by a user.
      operationId: getBooksHistory
      parameters:
        - name: isbn
          in: query
          description: ISBN to search
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPriceHistory'
        404:
          description: Not Found
components:
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          example: La razón de estar contigo
        subtitle:
          type: string
          example: Una novela para humanos
        rating:
          type: float
          example: 4.5
        thumbnail:
          type: string
          example: http://books.google.com/books/content?id=1USRDQAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api
        language:
          type: string
          example: es
        isbn:
          type: string
          example: 9788416867295
        authors:
          type: array
          items:
            type: string
            example: [W. Bruce Cameron]
        publisher:
          type: string
          example: Roca editorial
        categories:
          type: array
          items:
            type: string
            example: [Fiction]
        description:
          type: string
          example: «Adoro esta novela, no pude parar de leer. Me hizo pensar acerca de los propósitos de la vida. Al final, lloré y reí.» The New York Times «Una mezcla perfecta entre Marley y yo y Martes con mi viejo profesor.» Kirkus Reviews
    BookPrice:
      type: object
      properties:
        amazon:
          type: object
          properties:
            price:
              type: float
              example: 314
            url:
              type: string
              example: https://www.amazon.com.mx/raz%C3%B3n-estar-contigo-Bruce-Cameron/dp/8416867348/ref=sr_1_1?keywords=9788416867349&qid=1667062120&qu=eyJxc2MiOiIwLjAwIiwicXNhIjoiMC4wMCIsInFzcCI6IjAuMDAifQ%3D%3D&s=books&sr=1-1
        gandhi:
          type: object
          properties:
            price:
              type: float
              example: 334
            url:
              type: string
              example: https://www.gandhi.com.mx/la-razon-de-estar-contigo
        gonvill:
          type: object
          properties:
            price:
              type: float
              example: 314.57
            url:
              type: string
              example: https://www.gonvill.com.mx/libro/la-razon-de-estar-contigo_16350398
        el_sotano:
          type: object
          properties:
            price:
              type: float
              example: 379
            url:
              type: string
              example: https://www.elsotano.com/libro/la-razon-de-estar-contigo_10500797
    BookPriceHistory:
      type: object
      properties:
        isbn:
          type: string
          example: 9788416867349
        stores:
          type: object
          properties:
            amazon:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        example: 2021-05-01
                      price:
                        type: float
                        example: 314
            gandhi:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        example: 2021-05-01
                      price:
                        type: float
                        example: 334
            gonvill:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        example: 2021-05-01
                      price:
                        type: float
                        example: 314.57
            el_sotano:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      date:
                        type: string
                        example: 2021-05-01
                      price:
                        type: float
                        example: 379